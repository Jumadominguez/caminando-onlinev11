const { MongoClient } = require('mongodb');

// Configuraci√≥n de conexi√≥n
const MONGO_URI = 'mongodb://caminando_user:caminando_secure_2025@localhost:27017/caminando_online_db';
const DB_NAME = 'caminando_online_db';

async function initializeApplicationDatabase() {
  let client;

  try {
    console.log('üì° Conectando a MongoDB aplicaci√≥n database...');

    // Conectar con autenticaci√≥n
    client = new MongoClient(MONGO_URI);
    await client.connect();

    const db = client.db(DB_NAME);
    console.log('‚úÖ Conectado exitosamente a caminando_online_db');

    // 1. Crear colecci√≥n supermarkets con datos base
    console.log('üè™ Creando colecci√≥n supermarkets...');
    const supermarketsCollection = db.collection('supermarkets');

    const supermarkets = [
      {
        _id: 'carrefour',
        name: 'Carrefour',
        baseUrl: 'https://www.carrefour.com.ar',
        logo: 'üè™',
        country: 'Argentina',
        currency: 'ARS',
        active: true,
        lastScraped: null,
        scrapeConfig: {
          userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          timeout: 30000,
          retries: 3
        }
      },
      {
        _id: 'jumbo',
        name: 'Jumbo',
        baseUrl: 'https://www.jumbo.com.ar',
        logo: 'üõí',
        country: 'Argentina',
        currency: 'ARS',
        active: true,
        lastScraped: null,
        scrapeConfig: {
          userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          timeout: 30000,
          retries: 3
        }
      },
      {
        _id: 'dia',
        name: 'Dia',
        baseUrl: 'https://www.dia.com.ar',
        logo: 'üè¨',
        country: 'Argentina',
        currency: 'ARS',
        active: true,
        lastScraped: null,
        scrapeConfig: {
          userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          timeout: 30000,
          retries: 3
        }
      }
    ];

    await supermarketsCollection.insertMany(supermarkets);
    console.log('‚úÖ Supermercados insertados');

    // 2. Crear colecci√≥n categories con datos base
    console.log('üìÇ Creando colecci√≥n categories...');
    const categoriesCollection = db.collection('categories');

    const categories = [
      {
        _id: 'alimentos',
        name: 'alimentos',
        displayName: 'Alimentos',
        description: 'Productos alimenticios y bebidas',
        icon: 'üçé',
        color: '#4CAF50',
        priority: 1,
        active: true,
        featured: true,
        subcategories: [],
        metadata: { productCount: 0 }
      },
      {
        _id: 'bebidas',
        name: 'bebidas',
        displayName: 'Bebidas',
        description: 'Bebidas alcoholicas y no alcoholicas',
        icon: 'ü•§',
        color: '#2196F3',
        priority: 2,
        active: true,
        featured: true,
        subcategories: [],
        metadata: { productCount: 0 }
      },
      {
        _id: 'limpieza',
        name: 'limpieza',
        displayName: 'Limpieza',
        description: 'Productos de limpieza y hogar',
        icon: 'üßΩ',
        color: '#FF9800',
        priority: 3,
        active: true,
        featured: false,
        subcategories: [],
        metadata: { productCount: 0 }
      },
      {
        _id: 'perfumeria',
        name: 'perfumeria',
        displayName: 'Perfumer√≠a',
        description: 'Cuidado personal y perfumer√≠a',
        icon: 'üß¥',
        color: '#E91E63',
        priority: 4,
        active: true,
        featured: false,
        subcategories: [],
        metadata: { productCount: 0 }
      }
    ];

    await categoriesCollection.insertMany(categories);
    console.log('‚úÖ Categor√≠as insertadas');

    // 3. Crear colecciones vac√≠as para el resto
    console.log('üìÅ Creando colecciones restantes...');

    const collections = [
      'subcategories',
      'producttypes',
      'products',
      'filters',
      'offers'
    ];

    for (const collectionName of collections) {
      await db.createCollection(collectionName);
      console.log(`‚úÖ Colecci√≥n ${collectionName} creada`);
    }

    // 4. Crear √≠ndices recomendados
    console.log('üîç Creando √≠ndices...');

    // √çndices para supermarkets
    await supermarketsCollection.createIndex({ active: 1 });
    await supermarketsCollection.createIndex({ name: 1 });

    // √çndices para categories
    await categoriesCollection.createIndex({ active: 1, priority: -1 });
    await categoriesCollection.createIndex({ name: 1 });
    await categoriesCollection.createIndex({ featured: 1 });

    console.log('‚úÖ √çndices creados');

    // 5. Verificar configuraci√≥n
    console.log('üîç Verificando configuraci√≥n...');

    const stats = await db.stats();
    console.log(`üìä Base de datos configurada:`);
    console.log(`   ‚Ä¢ Colecciones: ${stats.collections}`);
    console.log(`   ‚Ä¢ Documentos totales: ${stats.objects}`);
    console.log(`   ‚Ä¢ Tama√±o: ${(stats.dataSize / 1024 / 1024).toFixed(2)} MB`);

    console.log('üéâ Base de datos de aplicaci√≥n inicializada exitosamente!');

  } catch (error) {
    console.error('‚ùå Error inicializando base de datos:', error.message);
    process.exit(1);
  } finally {
    if (client) {
      await client.close();
      console.log('üîå Conexi√≥n cerrada');
    }
  }
}

// Ejecutar inicializaci√≥n
initializeApplicationDatabase().catch(console.error);